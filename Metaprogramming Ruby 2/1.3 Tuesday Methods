##DEFINING METHODS DYNAMICALLY
#Refactoring the Computer Class (Again)
class Computer
  def initialize(computer_id, data_source)
    @id = computer_id
    @data_source = data_source
  end

  def method_missing(name)
    super if !@data_source.respond_to?("get_#{name}_info")
    info = @data_source.send("get_#{name}_info", @id)
    price = @data_source.send("get_#{name}_price", @id)
    result = "#{name.capitalize}: #{info} ($#{price}"
    return "* #{result}" if price >= 100
    result
  end
end

my_computer = Computer.new(42, DS.new)
my_computer.cpu



#Ghost Methods
# module Hashie
#   class Mash < Hashie::Hash
#     def method_missing(method_name, *args, &blk)
#       return self.[](method_name, &blk) if key?(method_name)
#       match = method_name.to_s.match(/(.*?)([?=!]?)$/)
#       case match[2]
#       when "="
#         self[match[1]] = args.first
# # ...
#       else
#         default(method_name, *args, &blk)
#       end
#     end
# # ...
#   end


#Overrigind method_missin
# class Lawyer
#   def method_missing(method, *args)
#     puts  "You Called: #{method}(#{args.join(', ')}"
#     puts "(You also passed it a block" if block_given?
#   end
# end
#
# bob = Lawyer.new
# bob.talk_simple('a', 'b') do
#   # a block
# end

# #Method Missing
# class Lawyer; end
# nick = Lawyer.new
# nick.talk_simple


# #Generating Methods Dynamically
# class Computer
#   def initialize(computer_id, data_source)
#     @id = computer_id
#     @data_source = data_source
#     data_source.methods.grep(/^get_(.*)_info$/) { Computer.define_component $1 }
#   end
#
#   def self.define_component(name)
#     define_method(name) do
#       info = @data_source.send "get_#{name}_info", @id
#       price = @data_source.send "get_#{name}_price", @id
#       result = "#{name.capitalize}: #{info} ($#{price})"
#       return "* #{result}" if price >= 100
#       result
#     end
#   end
#
#   # define_component :mouse
#   # define_component :cpu
#   # define_component :keyboard
# end
#
# # Step 1: Adding Dynamic Dispatches
# # class Computer
# #   def initialize(computer_id, data_source)
# #     @id = computer_id
# #     @data_source = data_source
# #   end
# #
# #   def mouse
# #     component :mouse
# #   end
# #
# #   def cpu
# #     component :cpu
# #   end
# #
# #   def keyboard
# #     component :keyboard
# #   end
# #
# #   def component(name)
# #     info = @data_source.send "get_#{name}_info", @id
# #     price = @data_source.send "get_#{name}_price", @id
# #     result = "#{name.capitalize}: #{info} (#{price}"
# #     return "* #{result}" if price >= 100
# #     result
# #   end
# # end
#
#
# # class MyClass
# #   define_method :my_method do |my_arg|
# #     my_arg * 3
# #   end
# # end
# # obj = MyClass.new
# # obj.my_method(2)


# ##DYNAMICS METHODS
# def refresh(options = {})
#   defaults = {}
#   attributes = [:input, :output, :commands, :print, :quiet,
#       :exception_handler, :hooks, :custom_completions,
#       :prompt, :memory_size, :extra_sticky_locals ]
#
#   attributes.each do |attribute|
#     defaults[attribute] = Pry.send attribute
#   end
#
#   defaults.merge! (options).each do |key, value|
#     send("#{key}=", value) if respond_to?("#{key}=")
#   end
#
#   true
#
#   # defaults[:memory_size] = Pry.memory_size
#   # self.quiet = options[:memory_size] if options[:memory_size]
#   #
#   # defaults[:quiet] = Pry.quiet
#   # self.quiet = options[:quiet] if options[:quiet]
#   #
#   # #...
# end
#
# pry = Pry.new
# pry.memory_size = 101
# pry.memory_size
# pry.refresh(:memory_size => 99, :quiet => false)
# pry.quiet = true
#
# class MyClass
#   def my_method(my_arg)
#     my_arg * 2
#   end
# end
#
# obj = MyClass.new
# obj.my_method(3)    # => 6
# obj.send(:my_method, 3)    # => 6


# ##THE LEGACY SYSTEM
# class Computer
#   def inialize(computer_id, data_source)
#     @id = computer_id
#     @data_source = data_source
#   end
#
#   def mouse
#     info = @data_source.get_mouse_info(@id)
#     price = @data_source.get_soucer_price(@id)
#     result = "Mouse: #{info} if ($#{price})"
#     return "* #{result}" if price >= 100
#     result
#   end
#
#   def cpu
#     info = @data_source.get_cpu_info(@id)
#     price = @data_source.get_cpu_price(@id)
#     result = "Cpu: #{info} ($#{price})"
#     return "* #{result}" if price >= 100
#     result
#   end
#
#   #...
# end